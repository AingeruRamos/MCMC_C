// Copyright Notice ===========================================================
//
// mcmc.h, Copyright (c) 2023 Aingeru Ramos
//
// All Rights Reserved ========================================================
//
// This file is part of MCMC_C software project.
//
// MCMC_C is propietary software. The author has all the rights to the work.
// No third party may make use of this work without explicit permission of the author.
//
// ============================================================================

#ifndef _MCMC_H_
#define _MCMC_H_

#include "constants.h"
#include "stack.h"

/**
 * @class IterationResult
 * @brief
 * * Instances of this class saves the data generated 
 * * by one iteration of the MCMC
*/
class IterationResult {
    public:
        /**
         * @name copy
         * @remark virtual
         * @return Copy of this IterationResult
         * @brief 
         * * Creates a copy of this IterationResult 
        */
        virtual IterationResult* copy() = 0; 
};

/**
 * @class Replica
 * @param _results Pointer to ReplicaResult where save the results
 * @brief
 * * Instances of this class can represent any given model
 * * and used a s a replica in the MCMC algorithm
*/
class Replica {
    public:

        Stack<IterationResult*, N_ITERATIONS> _results;

        /**
         * @name trial
         * @remark virtual
         * @return A trial
         * @brief
         * * Generates a trial of the model
        */
        virtual void* trial() = 0;

        /**
         * @name eval
         * @remark virtual
         * @return Value of energy of the model
         * @brief
         * * Calculate the total energy of the model
        */
        virtual double eval() = 0;

        /**
         * @name delta
         * @remark virtual
         * @param trial A trial generated by 'trial'
         * @return Value of the difference of the actual model and 
         * the model result of apply the trial
         * @brief
         * * Calculate the effect of accept the trial
        */
        virtual double delta(void* trial) = 0;

        /**
         * @name move
         * @remark virtual
         * @param trial A trial generated by 'trial'
         * @brief
         * * Apply the trial to the model
        */
        virtual void move(void* trial) = 0;

        /**
         * @name save
         * @remark virtual
         * @param trial A trial generated by 'trial'
         * @brief
         * * Save the properties of the model
        */
        virtual void save(void* trial) = 0;
};

/**
 * @class Swap
 * @param _accepted Flag of accepted swap
 * @param _swap_candidate_1 Index of the first swap candidate
 * @param _swap_candidate_2 Index of the second swap candidate
 * @brief
 * * Instances of this class saves the planned swap between two replicas
*/
class Swap {
    public:
        bool _accepted;
        int _swap_candidate_1;
        int _swap_candidate_2;

        /**
         * @name Swap
         * @remark constructor
         * @param sw_cand_1 Index of the first swap candidate
         * @param sw_cand_2 Index of the second swap candidate
        */
        Swap(int sw_cand_1, int sw_cand_2);
};

/**
 * @name MCMC_iteration
 * @param model A Replica
 * @param temp Temperature to use for the simulation
 * @brief
 * * Does one iteration in MCMC algorithm in one Replica
*/
void MCMC_iteration(Replica* model, double temp);

/**
 * @name get_swap_prob
 * @param models Array of Replica-s
 * @param temps Array of temperatures
 * @return Probabilty to accept the swap
 * @brief
 * * Calculates the probability of accepting the swap
*/
double get_swap_prob(Swap* sw, Replica** models, double* temps);

#endif